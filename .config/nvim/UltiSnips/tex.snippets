# -----------------------------
# GLOBAL PYTHON
# -----------------------------

global !p

# Using https://castel.dev/post/lecture-notes-1/#context

def math() -> bool:
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'


def comment() -> bool:
    return vim.eval('vimtex#syntax#in_comment()') == '1'


def env(name: str) -> bool:
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and x != '0'


def matrix_tabstop_helper(rows: int, cols: int, line_spacing: int, tabstop_offset: int) -> str:
    output = ""
    for i in range(rows):
        output += line_spacing + ' ' * 4    # replace tab with 4 spaces 
        output += " & ".join(['$' + str(i * cols + j + tabstop_offset) for j in range(cols)])
        output += r" \\\ " + "\n"
    return output


NORMAL_MATRIX_PATTERN = re.compile(r"([bBpvV])mat(\d+)x(\d+)")
AUGMENTED_MATRIX_PATTERN = re.compile(r"amat(\d+)x(\d+).(\d+)") 


def create_normal_matrix(snip) -> str:
    # adapted from https://github.com/honza/vim-snippets/blob/master/UltiSnips/tex.snippets
    line = snip.buffer[snip.line]
    match = NORMAL_MATRIX_PATTERN.search(line)

    matrix_type, rows, cols = match.groups()
    rows = int(rows)
    cols = int(cols)
    matrix_str = matrix_type + "matrix"

    tabstop_offset = cols + 1
    line_spacing = line[:(len(line) - len(line.lstrip()))]
    remaining = line[:line.rfind(matrix_type + "mat")]

    snip.buffer[snip.line] = ""

    final_str = remaining + "\\begin{" + matrix_str + "}\n"
    final_str += matrix_tabstop_helper(rows, cols, line_spacing, tabstop_offset)
    final_str += line_spacing + "\\end{" + matrix_str + "}\n$0" 

    snip.expand_anon(final_str)


def create_augmented_matrix(snip):
    line = snip.buffer[snip.line]
    match = AUGMENTED_MATRIX_PATTERN.search(line)

    rows, cols, augcols = match.groups()
    rows = int(rows)
    cols = int(cols)
    augcols = int(augcols) 

    tabstop_offset = cols + 1

    line_spacing = line[:(len(line) - len(line.lstrip()))]
    remaining = line[:line.rfind("amat")]

    snip.buffer[snip.line] = ""

    first_line = r"\left(\begin{array}{" + "c" * cols + ("|" + "c" * augcols if augcols else "") + "}\n"

    final_str = remaining + first_line
    final_str += matrix_tabstop_helper(rows, cols + augcols, line_spacing, tabstop_offset)
    final_str += line_spacing + r"\end{array}\right)" + "\n"

    snip.expand_anon(final_str)

endglobal


# -----------------------------
# DOCUMENT TEXT AND NON-MATH COMMANDS
# -----------------------------

snippet homeworktemplate "homework document template"
\\documentclass[11pt]{homework}

\\input{mymathpreamble.tex}

\\newcommand{\\hwname}{$1}
\\newcommand{\\hwemail}{${2:46444107}}
\\newcommand{\\hwtype}{${3:Assignment}}
\\newcommand{\\hwnum}{$4}
\\newcommand{\\hwclass}{${5:CourseCode}}
\\newcommand{\\hwlecture}{}  % blank
\\newcommand{\\hwsection}{}  % blank

\\begin{document}
\\maketitle
$0
\\end{document}
endsnippet

snippet normalquestion "normal question"
\\question $0
endsnippet

snippet alphaquestion "alpha part question"
\\question
\\begin{alphaparts}
\\questionpart $0
\\end{alphaparts}
endsnippet

snippet \begin "begin"
\\begin{$1}
    $0
\\end{$1}
endsnippet

snippet \align "\\begin{align*}"
\\begin{align*}
    $0
\\end{align*}
endsnippet

snippet \enum "\\begin{enumerate}"
\\begin{enumerate}
    \\item $0
\\end{enumerate}
endsnippet

snippet \item "\\begin{itemize}"
\\begin{itemize}
    \\item $0
\\end{itemize}
endsnippet

snippet \proof "\\begin{proof}"
\\begin{proof}
    $0
\\end{proof}
endsnippet

snippet \theorem "\\begin{theorem}"
\\begin{theorem}
    $0
\end{theorem}
endsnippet

snippet \proposition "\\begin{proposition}"
\\begin{proposition}
    $0
\\end{proposition}
endsnippet

snippet \definition "\\begin{definition}"
\\begin{definition}[$1]
    $0
\\end{definition}
endsnippet

snippet \emph "\\emph{}"
\\emph{$1}$0
endsnippet

snippet \textbf "\\textbf{}"
\\textbf{$1}$0
endsnippet 

snippet \si "numerical unit"
\\SI{$1}{$2}$0
endsnippet

# this is because \SI can't deal with formulas inside
context "math()"
snippet \su "formula unit"
\,\si{$1}$0
endsnippet

snippet figure "figure"
\\begin{center}
    \\includegraphics[scale=${1:0.5}]{$2}
\\end{center}
$0
endsnippet

snippet \ "inline math" w
\\($1\\)$0
endsnippet

snippet \[ "display math" w
\\[$1\\]$0
endsnippet


# -----------------------------
# STANDALONE SYMBOLS
# -----------------------------

# === GREEK LETTERS ===

context "math()"
snippet "(?<!\\)(alpha|beta|gamma|delta|sigma|theta|mu|pi|rho|sigma|tau|varphi|omega)" "greek letters verbatim" rA
`!p snip.rv = "\\" + match.group(1)`
endsnippet

context "math()"
snippet "(?<!\\)(Delta|Omega)" "uppercase greek verbatim" rA
`!p snip.rv = "\\" + match.group(1)`
endsnippet

snippet meow "meow" w
moo
endsnippet

context "math()"
snippet "(?<!\\)vareps" "\\varepsilon" rwA
\\varepsilon
endsnippet

context "math()"
snippet "(?<!\\|\w)lam" "\\lambda" riA
\\lambda
endsnippet

# === LOGIC ===

context "math()"
snippet "(?<!\\|\w)fa" "\forall" rwA
\\forall
endsnippet

context "math()"
snippet "(?<!\\|\w)ee" "\exists" rwA
\\exists
endsnippet

context "math()"
snippet "(?<!\\|\w)nee" "\nexists" rwA
\\nexists
endsnippet

context "math()"
snippet "(?<!\\|\w)imp" "\implies" rwA
\\implies
endsnippet

context "math()"
snippet "(?<!\\|\w)rimp" "\impliedby" rwA
\\impliedby
endsnippet

# === SET THEORY ===

context "math()"
snippet "(?<!\\|\w)(leq|geq|neq)" "leq, geq, neq" rwA
`!p snip.rv = "\\" + match.group(1)`
endsnippet

context "math()"
snippet "(?<!\\|\w)lt" "<" rA
<
endsnippet

context "math()"
snippet "(?<!\\|\w)gt" ">" rA
>
endsnippet

context "math()"
snippet "(?<!\\|\w)inn" "\\in" rwA
\\in
endsnippet

context "math()"
snippet "(?<!\\)(notin|cap|cup)" "notin, cap, cup" rwA
`!p snip.rv = "\\" + match.group(1)`
endsnippet

context "math()"
snippet "(?<!\\)sbt" "\\subset" rwA
\\subset
endsnippet

context "math()"
snippet "(?<!\\)rsbt" "\\supset" rwA
\\supset
endsnippet

context "math()"
snippet "(?<!\\)esbt" "\\subseteq" rwA
\\subseteq
endsnippet

context "math()"
snippet "(?<!\\)ersbt" "\\supseteq" rwA
\\supseteq
endsnippet

context "math()"
snippet "bb(.)" "\\mathbb{R}" rwA
`!p snip.rv = "\\mathbb{" + match.group(1).upper() + "}"`
endsnippet

# == MISCELLANEOUS ==

context "math()"
snippet "(?<!\\)infty" "\\infty" rwA
\\infty
endsnippet


# -----------------------------
# NOTATION
# -----------------------------

# === SEQUENCES, LIMITS ===

context "math()"
snippet "(?<!\\|\w)seq" "sequence" rwA
($1_{${2:n}})^{\infty}_{$2=1}$0
endsnippet

context "math()"
snippet "(?<!\\)sbq" "subsequence" rwA
($1_{${2:n}_{${3:k}}})^{\infty}_{$3=1}$0
endsnippet

context "math()"
snippet "(?<!\\)limm" "limit" rwA
\lim_{$1 \to $2}$0
endsnippet

context "math()"
snippet "(?<!\\)limsup" "limsup" rwA
\limsup_{$1 \to $2}$0
endsnippet

context "math()"
snippet "(?<!\\)liminf" "liminf" rwA
\liminf_{$1 \to $2}$0
endsnippet

# === CALCULUS ===

context "math()"
snippet nint "definite integral" iA
\\int_{$1}^{$2}$0
endsnippet

context "math()"
snippet uint "upper integral" iA
\\uint{$1}{$2}$0
endsnippet

context "math()"
snippet lint "lower integral" iA
\\lint{$1}{$2}$0
endsnippet

context "math()"
snippet iint "double integral" iA
\\iint_{$1}$0
endsnippet

context "math()"
snippet int "normal integral" wA
\\int
endsnippet

context "math()"
snippet summ "sum with limits" iA
\\sum_{$1}^{$2}
endsnippet

context "math()"
snippet isum "infinite sum" iA
\\sum_{$1}^{\infty}
endsnippet

context "math()"
snippet prod "product with limits" A
\\prod_{$1}^{$2}
endsnippet

context "math()"
snippet iprod "infinite product" A
\\prod_{$1}^{\infty}
endsnippet

context "math()"
snippet "(?<!\\|\w)der" "derivative" rwA
\\deriv
endsnippet

context "math()"
snippet isup "supremum for upper sum" A
\\sup_{x \\in [x_{${1:i-1}}, x_{${2:i}}]} ${3:f(x)} $0
endsnippet

context "math()"
snippet iinf "infimum for lower sum" A
\\inf_{x \\in [x_{${1:i-1}}, x_{${2:i}}]} ${3:f(x)} $0
endsnippet

# === FRACTIONS ===

context "math()"
snippet \fr "fraction" i
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet d// "derivative fraction" A
\\derivfrac{$1}{$2}$0
endsnippet

context "math()"
snippet \dfr "derivative fraction" i
\\derivfrac{$1}{$2}$0
endsnippet

context "math()"
snippet \pfr "partial derivative fraction" i
\\pfrac{$1}{$2}$0
endsnippet

# == OPERATORS ==

context "math()"
snippet \inner "inner product" i
\\inner{$1}{$2}$0
endsnippet

context "math()"
snippet "(?<!\\)abs" "absolute value" rwA
\\abs{$1}$0
endsnippet

context "math()"
snippet \norm "norm of vector" i
\\norm{$1}$0
endsnippet

context "math()"
snippet "(?<!\\)times" "\\times" rwA
\\times
endsnippet

context "math()"
snippet sq "squared" iA
^{2}
endsnippet

context "math()"
snippet cb "cubed" iA
^{3}
endsnippet

context "math()"
snippet pow "exponent" iA
^{$1}$0
endsnippet

context "math()"
snippet "(?<!\\|n)(sub)" "manual subscript" riA
_{$1}$0
endsnippet

# adapted from gilles
context "math()"
snippet '([A-Za-z](?<!mat)(?<!mat\dx))(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet "(?<!\\)root" "square root" rwA
\\sqrt{$1}$0
endsnippet

context "math()"
snippet "(?<!\\)noot" "variable root" rwA
\\sqrt[$1]{$2}$0
endsnippet

context "math()"
snippet "(?<!\\|u)vec" "vector" rwA
\\vec{$1}$0
endsnippet

context "math()"
snippet "(?<!\\)uvec" "under tilde vector" rwA
\\uvec{$1}$0
endsnippet

context "math()"
snippet \hat "unit vector" w
\\hat{$1}$0
endsnippet

context "math()"
snippet \proj "orthogonal projection" i
\\proj_{$1}($2)$0
endsnippet


# -----------------------------
# BRACKETS
# -----------------------------

context "math()"
snippet "(?<!\\)lrp" "left and right paren" rwA
\\left($1\\right)$0
endsnippet

context "math()"
snippet "(?<!\\)lr\[" "left and right squ bracket" rwA
\\left[$1\\right]$0
endsnippet

context "math()"
snippet "(?<!\\)lrb" "left and right braces" rwA
\\left\\{$1\\right\\}$0
endsnippet

snippet { "manual braces" w
\\{$1\\}$0
endsnippet


# -----------------------------
# MATRICES
# -----------------------------

context "math()"
snippet \pmat "pmatrix" w
\\begin{pmatrix}
    $0
\\end{pmatrix}
endsnippet

context "math()"
pre_expand "create_normal_matrix(snip)"
snippet "([bBpvV])mat(rix)?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" wr
endsnippet

context "math()"
pre_expand "create_augmented_matrix(snip)"
snippet "amat(\d+)x(\d+).(\d+)" "Generate augmented matrix" wr
endsnippet
