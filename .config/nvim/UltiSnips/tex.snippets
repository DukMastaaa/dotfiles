# Python global stuff
global !p

def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and x != '0'

endglobal

# Document text
snippet homeworktemplate "homework document template"
\\documentclass[11pt]{homework}

\\input{mymathpreamble.tex}

\\newcommand{\\hwname}{$1}
\\newcommand{\\hwemail}{${2:46444107}}
\\newcommand{\\hwtype}{${3:Assignment}}
\\newcommand{\\hwnum}{$4}
\\newcommand{\\hwclass}{${5:CourseCode}}
\\newcommand{\\hwlecture}{}  % blank
\\newcommand{\\hwsection}{}  % blank

\\begin{document}
\\maketitle
$0
\\end{document}
endsnippet

snippet normalquestion "normal question"
\\question $0
endsnippet

snippet alphaquestion "alpha part question"
\\question
\\begin{alphaparts}
\\questionpart $0
\\end{alphaparts}
endsnippet

# LaTeX tags
snippet \begin "begin"
\\begin{$1}
    $0
\\end{$1}
endsnippet

snippet \align "\\begin{align*}"
\\begin{align*}
    $0
\\end{align*}
endsnippet

snippet \enum "\\begin{enumerate}"
\\begin{enumerate}
    \\item $0
\\end{enumerate}
endsnippet

snippet \item "\\begin{itemize}"
\\begin{itemize}
    \\item $0
\\end{itemize}
endsnippet

snippet \proof "\\begin{proof}"
\\begin{proof}
    $0
\\end{proof}
endsnippet

snippet \theorem "\\begin{theorem}"
\\begin{theorem}
    $0
\end{theorem}
endsnippet

snippet \proposition "\\begin{proposition}"
\\begin{proposition}
    $0
\\end{proposition}
endsnippet

snippet \emph "\\emph{}"
\\emph{$1}$0
endsnippet

snippet \textbf "\\textbf{}"
\\textbf{$1}$0
endsnippet 

snippet \ "inline math" w
\\($1\\)$0
endsnippet

snippet \[ "display math" w
\\[$1\\]$0
endsnippet

# Quantifiers and Logic
context "math()"
snippet fa "\forall" wA
\\forall
endsnippet

context "math()"
snippet ee "\exists" wA
\\exists
endsnippet

context "math()"
snippet nee "\nexists" wA
\\nexists
endsnippet

context "math()"
snippet imp "\implies" wA
\\implies
endsnippet

context "math()"
snippet rimp "\impliedby" wA
\\impliedby
endsnippet

# Sequences and Limits
context "math()"
snippet seq "sequence" wA
($1_{${2:n}})^{\infty}_{$2=1}$0
endsnippet

context "math()"
snippet sbq "subsequence" wA
($1_{${2:n}_{${3:k}}})^{\infty}_{$3=1}$0
endsnippet

context "math()"
snippet limm "limit" wA
\lim_{$1 \to $2}$0
endsnippet

context "math()"
snippet limsup "limsup" wA
\limsup_{$1 \to $2}$0
endsnippet

context "math()"
snippet liminf "liminf" wA
\liminf_{$1 \to $2}$0
endsnippet

# Derivatives, Integrals, Sums, Products 
context "math()"
snippet nint "definite integral" A
\\int_{$1}^{$2} $0
endsnippet

context "math()"
snippet "(?<!\\|n)(int)" "indefinite integral" rA
\\int
endsnippet

context "math()"
snippet sum "sum with limits" iA
\\sum_{$1}^{$2}
endsnippet

context "math()"
snippet isum "infinite sum" iA
\\sum_{$1}^{\infty}
endsnippet

context "math()"
snippet prod "product with limits" A
\\prod_{$1}^{$2}
endsnippet

context "math()"
snippet iprod "infinite product" A
\\prod_{$1}^{\infty}
endsnippet

context "math()"
snippet der "derivative" wA
\\deriv
endsnippet

# Operators, Fractions 
context "math()"
snippet // "fraction" A
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet \fr "fraction" i
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet d// "derivative fraction" A
\\derivfrac{$1}{$2}$0
endsnippet

context "math()"
snippet \dfr "derivative fraction" i
\\derivfrac{$1}{$2}$0
endsnippet

context "math"
snippet \pfr "partial derivative fraction" i
\\pfrac{$1}{$2}$0
endsnippet

context "math()"
snippet abs "absolute value" wA
\\abs{$1}$0
endsnippet

context "math()"
snippet times "\\times" wA
\\times
endsnippet

context "math()"
snippet sq "squared" iA
^{2}
endsnippet

context "math()"
snippet cb "cubed" iA
^{3}
endsnippet

context "math()"
snippet pow "exponent" iA
^{$1}$0
endsnippet

context "math()"
snippet sub "subscript" iA
_{$1}$0
endsnippet

# from gilles
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet "(?<!\\)(leq|geq|neq)" "leq, geq, neq" rwA
`!p snip.rv = "\\" + match.group(1)`
endsnippet

context "math()"
snippet lt "<" wA
<
endsnippet

context "math()"
snippet gt ">" wA
>
endsnippet

context "math()"
snippet inn "\\in" wA
\\in
endsnippet

context "math()"
snippet "(?<!\\)(notin)" "\\notin" rwA
\\notin
endsnippet

context "math()"
snippet "(?<!\\)(cap)" "\\cap" rwA
\\cap
endsnippet

context "math()"
snippet "(?<!\\)(cup)" "\\cup" rwA
\\cup
endsnippet

context "math()"
snippet sbt "\\subset" wA
\\subset
endsnippet

context "math()"
snippet rsbt "\\supset" wA
\\supset
endsnippet

context "math()"
snippet esbt "\\subseteq" wA
\\subseteq
endsnippet

context "math()"
snippet ersbt "\\supseteq" wA
\\supseteq
endsnippet

context "math()"
snippet root "square root" wA
\\sqrt{$1}$0
endsnippet

context "math()"
snippet noot "variable root" wA
\\sqrt[$1]{$2}$0
endsnippet

context "math()"
snippet vec "vector" wA
\\vec{$1}$0
endsnippet

# Brackets, Braces, Parentheses
context "math()"
snippet lrp "left and right paren" wA
\\left($1\\right)$0
endsnippet

context "math()"
snippet lr[ "left and right squ bracket" wA
\\left[$1\\right]$0
endsnippet

context "math()"
snippet lrb "left and right braces" wA
\\left\\{$1\\right\\}$0
endsnippet

snippet { "manual braces" w
\\{$1\\}$0
endsnippet

# Matrices
context "math()"
snippet \pmat "pmatrix" w
\\begin{pmatrix}
	$0
\\end{pmatrix}
endsnippet

# Symbols 
# Greek letters
# Lowercase
context "math()"
snippet "(?<!\\)(alpha|beta|gamma|delta|sigma|theta|mu|pi|rho|sigma|tau|varphi|omega)" "lowercase-greek-verbatim" rwA
`!p snip.rv = "\\" + match.group(1)`
endsnippet

# (lowercase-greek-abbreviated)
context "math()"
snippet vareps "\\varepsilon" wA
\\varepsilon
endsnippet

context "math()"
snippet lam "\\lambda" wAi
\\lambda
endsnippet

# Uppercase
context "math()"
snippet "(?<!\\)(Delta|Omega)" "uppercase-greek-verbatim" rwA
`!p snip.rv = "\\" + match.group(1)`
endsnippet

context "math()"
snippet "bb(.)" "\\mathbb{R}" rwA
`!p snip.rv = "\\mathbb{" + match.group(1).upper() + "}"`
endsnippet

context "math()"
snippet "(?<!\\)(infty)" "\\infty" rwA
\\infty
endsnippet
